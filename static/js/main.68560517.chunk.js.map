{"version":3,"sources":["layouts/SignedIn.jsx","layouts/SignedOut.jsx","layouts/Navi.jsx","pages/ChoosingSignInMethod.jsx","pages/ChoosingSignUpMethod.jsx","services/EmployerService.js","pages/Employers/EmployerList.jsx","services/JobService.js","pages/Jobs/JobList.jsx","services/JobPositionService.js","pages/JobPositionList.jsx","services/JobSeekerService.js","pages/JobSeekers/JobSeekerList.jsx","pages/Employers/EmployerSignUpPage.jsx","services/CityService.js","services/WorkPlaceService.js","services/WorkTimeService.js","pages/Employers/JobAddPage.jsx","pages/SystemUsers/SystemUserSignUpPage.jsx","services/ActivationPanelService.js","pages/SystemUsers/JobConfirmationPanel.jsx","pages/JobSeekers/JobSeekerSignUpPage.jsx","pages/MainPage.jsx","pages/JobSeekers/JobSeekerDetail.jsx","pages/Employers/EmployerDetailPage.jsx","pages/Jobs/JobDetailPage.jsx","layouts/Dashboard.jsx","layouts/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["SignedIn","_jsx","SignedOutSignedOut","params","children","_jsxs","Button","Group","inverted","color","as","NavLink","to","Or","Navi","isAuthenticated","setIsAuthanticated","useState","Menu","size","vertical","Item","Input","placeholder","Link","name","Icon","Dropdown","item","text","icon","signedOut","SignedOut","signedIn","ChoosingSignInMethod","Header","textAlign","class","widths","ChoosingSignUpMethod","colorOfTitle","setcolorOfTitle","onClick","EmployerService","getEmployers","axios","get","getEmployerById","id","EmployerList","employers","setEmployers","useEffect","then","result","data","catch","Table","celled","padded","Row","HeaderCell","singleLine","Body","map","employer","Cell","className","companyName","webSites","phone","user","email","createdDate","animated","basic","concat","Content","visible","hidden","JobService","getJobs","addJob","job","post","deleteJob","getApprovedJobs","getUnapprovedJobs","setActive","getJobById","JobList","jobs","setJobs","positionName","number_of_empty_positions","cityName","deadLine","primary","JobPositionService","getJobPositions","JobPositionList","jobPositions","setJobPositions","jobPosition","position_name","JobSeekersService","getJobSeekers","getJobSeekerById","JobSeekerList","jobSeekers","setJobSeekers","JobSeekerService","jobseeker","images","imagePath","src","alt","firstName","lastName","languages","length","language","languageName","languageLevel","workExperiences","workExperience","workplaceName","attendedSchools","school","schoolName","info","EmployerSignUpPage","history","useHistory","TextField","_ref","label","props","_objectWithoutProperties","_excluded","field","meta","useField","for","_objectSpread","type","touched","error","Formik","initialValues","validationSchema","Yup","required","onSubmit","values","push","Form","CityService","getCities","WorkPlaceService","getWorkPlaces","WorkTimeService","getWorkTimes","JobAddPage","employerId","useParams","jobService","workTimes","setWorkTimes","workPlaces","setWorkPlaces","cities","setCities","workPlaceService","workTimeService","cityService","jobPositionService","workTimeOptions","workTime","index","key","workTimeName","value","WorkPlaceOptions","workPlace","workPlaceName","CityOptions","city","JobPositionOptions","InputField","TrueFalse","_ref2","_excluded2","Checkbox","Label","pointing","SelectionFields","_ref3","_excluded3","fluid","clearable","search","selection","handleChangeSemantic","prop","fieldName","setFieldValue","numberOfEmptyPositions","maximumSalary","minimumSalary","description","deadline","cityId","jobPositionId","workTimeId","workPlaceId","agreeCheckBox","min","Date","oneOf","alert","handleOnSubmit","formikprops","handleSubmit","Grid","stackable","computer","Column","options","onChange","event","workTimeid","columns","style","width","content","labelPosition","SystemUserSignUpPage","ActivationPanelService","setApproved","panelForJob","setUnapproved","JobConfirmationPanel","activationPanelService","systemUserId","unapprovedJobs","setUnapprovedJobs","approvedJobs","setApprovedJobs","handleOnClickDelete","forEach","document","getElementById","toString","checked","window","location","reload","Segment","compact","definition","fullWidth","collapsing","toggle","Footer","colSpan","floated","negative","positive","jobId","detail","transparent","iconPosition","MainPage","JobSeekerDetail","_jobSeeker$user","_jobSeeker$attendedSc","_jobSeeker$attendedSc2","_jobSeeker$languages","_jobSeeker$languages2","_jobSeeker$workExperi","_jobSeeker$workExperi2","_jobSeeker$user2","jobSeekerId","jobSeeker","setJobSeeker","secondary","rounded","stacked","Image","verticalAlign","circular","subheader","dividing","attached","Card","centered","itsPerRow","Meta","dateOfStarting","dateOfGraduation","Description","striped","image","Subheader","levelDescription","experience","startingDate","quitDate","Divider","horizontal","linkedInAccount","githubAccount","EmployerDetailPage","_employer$webSites","_employer$webSites2","_employer$user","setEmployer","JobDetailPage","_job$employer2","_job$jobPosition","_job$city","_job$workPlace","_job$workTime","setJob","_job$employer","console","log","mobile","tablet","List","empty_positions","Container","Dashboard","ToastContainer","position","Route","exact","path","component","JobSeekerSignUpPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","BrowserRouter"],"mappings":"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","file":"static/js/main.68560517.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function SignedIn() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n// import { useState } from 'react';\r\nimport {Button} from 'semantic-ui-react';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport default function SignedOutSignedOut(params) {\r\n\r\n    // const [signUpOrIn, setSignUpOrIn] = useState()\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button.Group  >\r\n        <Button inverted color=\"blue\" as={NavLink} to={\"/signUp\"}>Sign Up</Button>\r\n        <Button.Or />\r\n        <Button as={NavLink} to={\"/signIn\"} inverted color=\"teal\" >Sign In</Button>\r\n      </Button.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Dropdown, Icon, Input, Menu } from 'semantic-ui-react'\r\nimport SignedIn from './SignedIn';\r\nimport SignedOut from './SignedOut';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default function Navi() {\r\n  \r\n\r\n\r\n  const [isAuthenticated, setIsAuthanticated] = useState(false)\r\n\r\n  function handleSignOut(params) {\r\n    setIsAuthanticated(false)\r\n  }\r\n\r\n  function handleSignIn(params) {\r\n    setIsAuthanticated(true)\r\n  }\r\n\r\n\r\n  return (\r\n    <div >\r\n      \r\n      <Menu size='large' vertical inverted >\r\n        <Menu.Item >\r\n          <Input placeholder='Search...' />\r\n        </Menu.Item>\r\n\r\n        <Menu.Item >\r\n          <Link to='/' >Home</Link>\r\n          <Menu.Menu>\r\n            <Menu.Item\r\n              name='jobs'\r\n              >\r\n              <Link to='/jobs' >Jobs</Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name='jobSeekers'\r\n              >\r\n              <Link to='/jobseekers' >Job Seekers</Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name='employers'\r\n              >\r\n              <Link to='/employers' >Employers</Link>\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name='jobPositions'\r\n              >\r\n              <Link to='/jobpositions' >Job Positions</Link>\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item\r\n          name='browse'\r\n          >\r\n          <Icon name='grid layout' />\r\n          Browse\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          name='messages'\r\n          >\r\n          Messages\r\n        </Menu.Item>\r\n        <Dropdown item text='More'>\r\n          <Dropdown.Menu >\r\n            <Dropdown.Item icon='edit' text='Edit Profile' />\r\n            <Dropdown.Item icon='globe' text='Choose Language' />\r\n            <Dropdown.Item icon='settings' text='Account Settings' />\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n\r\n        <Menu.Item >\r\n          {isAuthenticated ? <SignedIn signedOut={handleSignOut}/> : <SignedOut signedIn={handleSignIn}/>}\r\n        </Menu.Item>\r\n\r\n\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Button, Header} from 'semantic-ui-react';\r\n\r\nexport default function ChoosingSignInMethod() {\r\n  return (\r\n    <div>\r\n      <Header as='h2' textAlign='center' class='ui white'>\r\n        Sign In As a ...\r\n      </Header>\r\n      <Button.Group widths='3' >\r\n        <Button>Job Seeker</Button>\r\n        <Button>Employer</Button>\r\n        <Button>System User</Button>\r\n      </Button.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport {Button, Header} from 'semantic-ui-react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nexport default function ChoosingSignUpMethod() {\r\n\r\n  const [colorOfTitle, setcolorOfTitle] = useState(\"black\")\r\n\r\n  return (\r\n    <div>\r\n      <Header as='h2' textAlign='center' class='ui white' color={colorOfTitle}>\r\n        Sign Up As a ...\r\n      </Header>\r\n      <Button.Group widths='3'  >\r\n        <Button color=\"red\" inverted onClick={() => setcolorOfTitle(\"red\")} as={NavLink} to={'/signup/jobseeker' }>Job Seeker</Button>\r\n        <Button color=\"pink\" inverted onClick={() => setcolorOfTitle(\"pink\")}  as={NavLink} to={'/signup/employer' }>Employer</Button>\r\n        <Button color=\"orange\" inverted onClick={() => setcolorOfTitle(\"orange\")} as={NavLink} to={'/signup/systemuser' }>System User</Button>\r\n      </Button.Group>\r\n    </div>\r\n  );\r\n}","import axios from \"axios\";\r\n\r\nexport default class EmployerService {\r\n  getEmployers() {\r\n    return axios.get(\"http://localhost:8080/api/employers/getall\");\r\n  }\r\n\r\n  getEmployerById(id) {\r\n    return axios.get(\"http://localhost:8080/api/employers/getbyid?id=\"+id)\r\n  }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport EmployerService from '../../services/EmployerService'\r\nimport { Table, Header, Button, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function EmployerList() {\r\n\r\n  const [employers, setEmployers] = useState([])\r\n  useEffect(() => {\r\n    let employerService = new EmployerService();\r\n\r\n    employerService.getEmployers().then((result) => setEmployers(result.data.data)).catch();\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <Table celled padded color=\"black\" inverted>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell singleLine>Company Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Website(-s)</Table.HeaderCell>\r\n            <Table.HeaderCell>Phone Number</Table.HeaderCell>\r\n            <Table.HeaderCell>Email</Table.HeaderCell>\r\n            <Table.HeaderCell>Joined Date</Table.HeaderCell>\r\n            <Table.HeaderCell>Other infos</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n\r\n          {employers.map(employer => (\r\n\r\n            <Table.Row key={employer.id} textAlign='center'>\r\n              <Table.Cell>\r\n                <Header as='h2' textAlign='center' className=\"ui white\" id=\"white-employername\" >\r\n                  {employer.companyName}\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell singleLine>{employer.webSites}</Table.Cell>\r\n              <Table.Cell singleLine>{employer.phone}</Table.Cell>\r\n              <Table.Cell singleLine>{employer.user.email}</Table.Cell>\r\n              <Table.Cell singleLine>{employer.user.createdDate}</Table.Cell>\r\n              <Table.Cell>\r\n                <Button animated as={Link} color=\"pink\" basic inverted to={`/employers/${employer.id}`}>\r\n                  <Button.Content visible>Go to infos</Button.Content>\r\n                  <Button.Content hidden>\r\n                    <Icon name=\"arrow right\" />\r\n                  </Button.Content>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  )\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default class JobService {\r\n  getJobs() {\r\n    return axios.get(\"http://localhost:8080/api/jobs/getall\");\r\n  }\r\n  addJob(job) {\r\n    return axios.post(\"http://localhost:8080/api/jobs/add\",job)\r\n  }\r\n\r\n  deleteJob(id) {\r\n    return axios.post(\"http://localhost:8080/api/jobs/delete?id=\"+id)\r\n  }\r\n\r\n  getApprovedJobs() {\r\n    return axios.get(\"http://localhost:8080/api/jobs/getallapprovedjobs\");\r\n  }\r\n\r\n  getUnapprovedJobs() {\r\n    return axios.get(\"http://localhost:8080/api/jobs/getallunapprovedjobs\");\r\n  }\r\n\r\n  setActive(id){\r\n    return axios.post(\"http://localhost:8080/api/jobs/setactivetojobvisibility?id=\"+id)\r\n  }\r\n\r\n  getJobById(id){\r\n    return axios.get(\"http://localhost:8080/api/jobs/getjobbyid?id=\"+id);\r\n  }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Table, Header, Button, Icon} from 'semantic-ui-react';\r\nimport JobService from '../../services/JobService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function JobList() {\r\n  const [jobs, setJobs] = useState([]);\r\n  useEffect(() => {\r\n    let jobService = new JobService();\r\n\r\n    jobService\r\n      .getApprovedJobs()\r\n      .then((result) => setJobs(result.data.data))\r\n      .catch();\r\n  }, []);\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Table celled padded inverted>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>Postion</Table.HeaderCell>\r\n            <Table.HeaderCell>Company Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Number of Empty Position</Table.HeaderCell>\r\n            <Table.HeaderCell>City</Table.HeaderCell>\r\n            <Table.HeaderCell>Created date</Table.HeaderCell>\r\n            <Table.HeaderCell>Deadline</Table.HeaderCell>\r\n            <Table.HeaderCell>Other infos</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <Table.Body>\r\n          {jobs.map((job) => (\r\n            <Table.Row key={job.id} textAlign='center'>\r\n              <Table.Cell>\r\n                <Header as='h2' inverted>\r\n                  {job.positionName}\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell singleLine>{job.companyName}</Table.Cell>\r\n              <Table.Cell>\r\n                {job.number_of_empty_positions == null\r\n                  ? '0'\r\n                  : job.number_of_empty_positions}\r\n              </Table.Cell>\r\n              <Table.Cell singleLine>{job.cityName}</Table.Cell>\r\n              <Table.Cell>{job.createdDate}</Table.Cell>\r\n              <Table.Cell>{job.deadLine}</Table.Cell>\r\n              <Table.Cell>\r\n                <Button animated primary  basic inverted as={Link} to={`/jobs/${job.id}`}>\r\n                  <Button.Content  visible>Go to Detail<Icon name=\"right arrow\" /></Button.Content>\r\n                  <Button.Content hidden>\r\n                    <Icon name=\"file alternate\" />\r\n                  </Button.Content>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios';\r\n\r\nexport default class JobPositionService {\r\n  getJobPositions() {\r\n    return axios.get('http://localhost:8080/api/jobpositions/getall');\r\n  }\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Table, Header} from 'semantic-ui-react';\r\nimport JobPositionService from '../services/JobPositionService';\r\n\r\nexport default function JobPositionList() {\r\n  const [jobPositions, setJobPositions] = useState([]);\r\n  useEffect(() => {\r\n    let jobPositionService = new JobPositionService();\r\n\r\n    jobPositionService\r\n      .getJobPositions()\r\n      .then((result) => setJobPositions(result.data.data))\r\n      .catch();\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Table celled padded inverted>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell singleLine>Position Name</Table.HeaderCell>\r\n            <Table.HeaderCell>Id of Position</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {jobPositions.map((jobPosition) => (\r\n            <Table.Row key={jobPosition.id}>\r\n              <Table.Cell>\r\n                <Header as='h2' textAlign='center' className='ui white'>\r\n                  {jobPosition.position_name}\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell singleLine textAlign='center'>\r\n                {jobPosition.id}\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default class JobSeekersService {\r\n  getJobSeekers() {\r\n    return axios.get(\"http://localhost:8080/api/jobseekers/getall\");\r\n  }\r\n\r\n  getJobSeekerById(id){\r\n    \r\n    return axios.get(\"http://localhost:8080/api/jobseekers/getbyid?id=\"+id)\r\n  }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Table, Header, Button, Icon} from 'semantic-ui-react';\r\nimport JobSeekerService from '../../services/JobSeekerService';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function JobSeekerList() {\r\n  const [jobSeekers, setJobSeekers] = useState([]);\r\n  useEffect(() => {\r\n    let jobSeekerService = new JobSeekerService();\r\n    jobSeekerService\r\n      .getJobSeekers()\r\n      .then((result) => setJobSeekers(result.data.data))\r\n      .catch();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Table celled padded inverted textAlign=\"center\">\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>images</Table.HeaderCell>\r\n            <Table.HeaderCell singleLine>Name</Table.HeaderCell>\r\n            <Table.HeaderCell>languages</Table.HeaderCell>\r\n            <Table.HeaderCell>work experiences</Table.HeaderCell>\r\n            <Table.HeaderCell>attended Schools</Table.HeaderCell>\r\n            \r\n            <Table.HeaderCell>description</Table.HeaderCell>\r\n            <Table.HeaderCell>Other infos</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <Table.Body>\r\n          {jobSeekers.map((jobseeker) => (\r\n            <Table.Row key={jobseeker.id} textAlign='center'>\r\n              <Table.Cell>\r\n                {jobseeker.images.imagePath == null ? (\r\n                  <i className='huge icon'>\r\n                    <i className='user  circle icon'></i>\r\n                  </i>\r\n                ) : (\r\n                  <img src={jobseeker.images.imagePath} alt=''></img>\r\n                )}\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <Header\r\n                  as='h4'\r\n                  textAlign='center'\r\n                  className='ui white'\r\n                  id='white-jobseeker'>\r\n                  {jobseeker.firstName + ' ' + jobseeker.lastName}\r\n                </Header>\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                {jobseeker.languages.length === 0\r\n                  ? 'null'\r\n                  : jobseeker.languages.map(\r\n                      (language) =>\r\n                        language.languageName +\r\n                        ' level : ' +\r\n                        language.languageLevel.id\r\n                    )}\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                {!(!!jobseeker.workExperiences)\r\n                  ? 'null'\r\n                  : jobseeker.workExperiences.map(\r\n                      (workExperience) =>\r\n                        'Work place : ' +\r\n                        workExperience.workplaceName +\r\n                        ' Position : ' +\r\n                        workExperience.jobPosition.position_name\r\n                    )}\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                {jobseeker.attendedSchools.length === 0\r\n                  ? 'null'\r\n                  : jobseeker.attendedSchools.map(\r\n                      (school) =>\r\n                        'School : ' +\r\n                        school.school.schoolName +\r\n                        ' Department : ' +\r\n                        null\r\n                    )}\r\n              </Table.Cell>\r\n             \r\n              <Table.Cell>\r\n                {jobseeker.info === null\r\n                  ? 'nothing has been written'\r\n                  : jobseeker.info}\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                <Button animated color=\"red\" basic inverted as={Link} to={`/jobseekers/${jobseeker.id}`}>\r\n                  <Button.Content visible>Go to infos</Button.Content>\r\n                  <Button.Content hidden>\r\n                    <Icon name=\"arrow right\" />\r\n                  </Button.Content>\r\n                </Button>\r\n              </Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Header, Button} from 'semantic-ui-react';\r\nimport {Formik, Form, useField} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport default function EmployerSignUpPage() {\r\n  const history = useHistory();\r\n\r\n  const TextField = ({label, ...props}) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input>. We can use field meta to show an error\r\n    // message if the field is invalid and it has been touched (i.e. visited)\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <div>\r\n        <div className='ui input'>\r\n          <label\r\n            className='labelForEmployerSignUp'\r\n            for={props.id || props.name}>\r\n            {label}{' '}\r\n          </label>\r\n\r\n          <input type='text' {...field} {...props} />\r\n        </div>\r\n        <br />\r\n        {meta.touched && meta.error ? (\r\n          <div className='error'>\r\n            <div class='ui pointing red basic label'>{meta.error}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='employer-header'>\r\n      <Header as='h2' color='pink'>\r\n        Employer\r\n      </Header>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          id: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          id: Yup.number().required('Required')\r\n        })}\r\n        onSubmit={(values) => {\r\n\r\n          history.push('/employer/' + values.id);\r\n        }}>\r\n        <Form>\r\n          <TextField\r\n            label='Id'\r\n            name='id'\r\n            id=\"id\"\r\n            type='text'\r\n            placeholder='1,2,3 etc...'\r\n          />\r\n          <br />\r\n\r\n          <Button color='blue' inverted type='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default class CityService {\r\n  getCities() {\r\n    return axios.get(\"http://localhost:8080/api/cities/getAll\");\r\n  }\r\n}","import axios from \"axios\";\r\n\r\nexport default class WorkPlaceService {\r\n  getWorkPlaces() {\r\n    return axios.get(\"http://localhost:8080/api/workplaces/getall\");\r\n  }\r\n}","import axios from \"axios\";\r\n\r\nexport default class WorkTimeService {\r\n  getWorkTimes() {\r\n    return axios.get(\"http://localhost:8080/api/worktimes/getall\");\r\n  }\r\n}","import {Formik, Form, useField} from 'formik';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {useHistory, useParams} from 'react-router';\r\nimport JobService from '../../services/JobService';\r\nimport JobPositionService from '../../services/JobPositionService';\r\nimport CityService from '../../services/CityService';\r\nimport WorkPlaceService from '../../services/WorkPlaceService';\r\nimport WorkTimeService from '../../services/WorkTimeService';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  Button,\r\n  Dropdown,\r\n  Grid,\r\n  Header,\r\n  Label,\r\n  Checkbox,\r\n} from 'semantic-ui-react';\r\n\r\nexport default function JobAddPage() {\r\n  let {employerId} = useParams();\r\n\r\n  let jobService = new JobService();\r\n  const history = useHistory();\r\n\r\n  const [workTimes, setWorkTimes] = useState([]);\r\n  const [workPlaces, setWorkPlaces] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [jobPositions, setJobPositions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let workPlaceService = new WorkPlaceService();\r\n    let workTimeService = new WorkTimeService();\r\n    let cityService = new CityService();\r\n    let jobPositionService = new JobPositionService();\r\n\r\n    workPlaceService\r\n      .getWorkPlaces()\r\n      .then((result) => setWorkPlaces(result.data.data));\r\n\r\n    workTimeService\r\n      .getWorkTimes()\r\n      .then((result) => setWorkTimes(result.data.data));\r\n\r\n    cityService\r\n      .getCities()\r\n      .then((result) => setCities(result.data.data))\r\n      .catch();\r\n    jobPositionService\r\n      .getJobPositions()\r\n      .then((result) => setJobPositions(result.data.data))\r\n      .catch();\r\n  }, []);\r\n\r\n  const workTimeOptions = workTimes.map((workTime, index) => ({\r\n    key: index,\r\n    text: workTime.workTimeName,\r\n    value: workTime.id,\r\n  }));\r\n\r\n  const WorkPlaceOptions = workPlaces.map((workPlace, index) => ({\r\n    key: index,\r\n    text: workPlace.workPlaceName,\r\n    value: workPlace.id,\r\n  }));\r\n\r\n  const CityOptions = cities.map((city, index) => ({\r\n    key: index,\r\n    text: city.cityName,\r\n    value: city.id,\r\n  }));\r\n\r\n  const JobPositionOptions = jobPositions.map((jobPosition, index) => ({\r\n    key: index,\r\n    text: jobPosition.position_name,\r\n    value: jobPosition.id,\r\n  }));\r\n\r\n  const InputField = ({label, ...props}) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input>. We can use field meta to show an error\r\n    // message if the field is invalid and it has been touched (i.e. visited)\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <div>\r\n        <div className='ui input'>\r\n          <label className='labelForJobAddFields' for={props.id || props.name}>\r\n            {label}\r\n            <br />\r\n          </label>\r\n\r\n          <input {...field} {...props} />\r\n        </div>\r\n        <br />\r\n        {meta.touched && meta.error ? (\r\n          <div className='error'>\r\n            <div class='ui pointing red basic label'>{meta.error}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const TrueFalse = ({children, ...props}) => {\r\n    // React treats radios and checkbox inputs differently other input types, select, and textarea.\r\n    // Formik does this too! When you specify `type` to useField(), it will\r\n    // return the correct bag of props for you -- a `checked` prop will be included\r\n    // in `field` alongside `name`, `value`, `onChange`, and `onBlur`\r\n    const [field, meta] = useField({...props, type: 'checkbox'});\r\n    return (\r\n      <div>\r\n        <Checkbox {...field} {...props} />\r\n\r\n        {meta.touched && meta.error ? (\r\n          <Label basic color='red' pointing='left'>\r\n            <div className='error'>{meta.error}</div>\r\n          </Label>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const SelectionFields = ({label, ...props}) => {\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <div>\r\n        <label for={props.id || props.name}>{label}</label>\r\n        <Dropdown fluid clearable item search selection {...field} {...props} />\r\n\r\n        {meta.touched && meta.error ? (\r\n          <div class='ui pointing red basic label'>{meta.error}</div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleChangeSemantic = (prop, value, fieldName) => {\r\n    prop.setFieldValue(fieldName, value);\r\n  };\r\n\r\n  const handleOnSubmit = (values) => {\r\n    values.employerId = employerId;\r\n    values.createdDate = new Date();\r\n    jobService.addJob(values);\r\n    alert(\"Job added. After system user's confirmation, it will be listed.\");\r\n    history.push('/');\r\n  };\r\n  return (\r\n    <div className='marginTop '>\r\n      <Header\r\n        as='h1'\r\n        textAlign='center'\r\n        color='pink'\r\n        className='ui marginBottom'\r\n        id='headerForJob'>\r\n        Add Job\r\n      </Header>\r\n      <Formik\r\n        initialValues={{\r\n          numberOfEmptyPositions: '',\r\n          maximumSalary: '',\r\n          minimumSalary: '',\r\n          description: '',\r\n          deadline: '',\r\n          cityId: '',\r\n          jobPositionId: '',\r\n          workTimeId: '',\r\n          workPlaceId: '',\r\n          agreeCheckBox: ''\r\n        }}\r\n        validationSchema={Yup.object({\r\n          numberOfEmptyPositions: Yup.string().required(\r\n            'You have to indicate the number of empty positions!'\r\n          ),\r\n          minimumSalary: Yup.number()\r\n            .min(0, 'Salary can not be less than 0!')\r\n            .required('You have to indicate the minimum salary of job!'),\r\n          maximumSalary: Yup.number()\r\n            .min(0, 'Salary can not be less than 0!')\r\n            .required('You have to indicate the maximum salary of job!'),\r\n          description: Yup.string().required('You have to add description!'),\r\n          deadline: Yup.date()\r\n            .required('Deadline of the job is required!')\r\n            .min(new Date(), 'deadline must be in the future'),\r\n          workTimeId: Yup.string().required('Work Time must be chosen'),\r\n          cityId: Yup.string().required('City must be chosen!'),\r\n          workPlaceId: Yup.string().required('Work Time must be chosen!'),\r\n          jobPositionId: Yup.string().required('Job Position must be chosen!'),\r\n          agreeCheckBox: Yup.boolean()\r\n             .required('Required')\r\n             .oneOf([true], 'You must accept the terms and conditions.'),\r\n        })}\r\n        onSubmit={(values) => {\r\n          handleOnSubmit(values);\r\n        }}>\r\n        {(formikprops) => (\r\n          <Form onSubmit={formikprops.handleSubmit}>\r\n            <Grid stackable>\r\n              <Grid.Row computer={2}>\r\n                <Grid.Column computer={8}>\r\n                  <InputField\r\n                    label='Empty Positions'\r\n                    name='numberOfEmptyPositions'\r\n                    type='number'\r\n                    placeholder='1,2,3 etc...'\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column computer={8} >\r\n                  <div className='marginLeft'>\r\n                    <InputField\r\n                      label='Description'\r\n                      name='description'\r\n                      size='massive'\r\n                      type='text'\r\n                      placeholder='Looking for game developers, web dev. etc...'\r\n                      value={formikprops.values.description}\r\n                    />\r\n                  </div>\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n              <Grid.Row>\r\n                <Grid.Column computer={8}>\r\n                  <InputField\r\n                    label='Salary(minimum) '\r\n                    name='minimumSalary'\r\n                    type='number'\r\n                    placeholder='3500, 5000 etc...'\r\n                  />\r\n                </Grid.Column>\r\n\r\n                <Grid.Column computer={8}>\r\n                  <InputField\r\n                    label='Salary(maximum) '\r\n                    name='maximumSalary'\r\n                    type='number'\r\n                    placeholder='5000, 7500 etc...'\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n\r\n              <Grid.Row computer={1}>\r\n                <Grid.Column computer={8}>\r\n                  <SelectionFields\r\n                    id='jobPositionId'\r\n                    name='jobPositionId'\r\n                    label='Job Position'\r\n                    options={JobPositionOptions}\r\n                    placeholder='C# dev, Java Uzmanı etc.'\r\n                    onChange={(event, data) =>\r\n                      handleChangeSemantic(\r\n                        formikprops,\r\n                        data.value,\r\n                        'jobPositionId'\r\n                      )\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column computer={8}>\r\n                  <SelectionFields\r\n                    id='cityId'\r\n                    name='cityId'\r\n                    label='City'\r\n                    placeholder='City'\r\n                    onChange={(event, data) =>\r\n                      handleChangeSemantic(formikprops, data.value, 'cityId')\r\n                    }\r\n                    value={formikprops.values.cityId}\r\n                    item\r\n                    options={CityOptions}\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n\r\n              <Grid.Row computer={5}>\r\n                <Grid.Column computer={8}>\r\n                  <SelectionFields\r\n                    id='workTimeId'\r\n                    name='workTimeId'\r\n                    label='Work Time'\r\n                    options={workTimeOptions}\r\n                    placeholder='part-time / full-time'\r\n                    value={formikprops.values.workTimeid}\r\n                    onChange={(event, data) =>\r\n                      handleChangeSemantic(\r\n                        formikprops,\r\n                        data.value,\r\n                        'workTimeId'\r\n                      )\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n                <Grid.Column computer={8}>\r\n                  <SelectionFields\r\n                    id='workPlaceId'\r\n                    name='workPlaceId'\r\n                    label='Work Place'\r\n                    options={WorkPlaceOptions}\r\n                    placeholder='At the workplace / remote work'\r\n                    value={formikprops.values.workPlaceId}\r\n                    onChange={(event, data) =>\r\n                      handleChangeSemantic(\r\n                        formikprops,\r\n                        data.value,\r\n                        'workPlaceId'\r\n                      )\r\n                    }\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n\r\n              <Grid.Row columns={1}>\r\n                <Grid.Column computer={16}>\r\n                  <InputField\r\n                    style={{width: '100%'}}\r\n                    label='Deadline'\r\n                    name='deadline'\r\n                    type='date'\r\n                    placeholder='2022-06-27, 2022-06-27T13:28:17.707Z etc...'\r\n                    id='deadline'\r\n                  />\r\n                </Grid.Column>\r\n              </Grid.Row>\r\n            </Grid>\r\n            <Grid.Row columns={1}>\r\n              <Grid.Column>\r\n                <TrueFalse\r\n                  label='I agree to the terms and conditions'\r\n                  name='agreeCheckBox'\r\n                  id='agreeCheckBox'\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n\r\n            <br />\r\n\r\n            <Button\r\n              color='pink'\r\n              icon='add'\r\n              inverted\r\n              content='Add'\r\n              labelPosition='right'\r\n              type='submit'\r\n            />\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Header, Button} from 'semantic-ui-react';\r\nimport {Formik, Form, useField} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport default function SystemUserSignUpPage() {\r\n    const history = useHistory();\r\n\r\n  const TextField = ({label, ...props}) => {\r\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n    // which we can spread on <input>. We can use field meta to show an error\r\n    // message if the field is invalid and it has been touched (i.e. visited)\r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <div>\r\n        <div className='ui input'>\r\n          <label\r\n            className='labelForEmployerSignUp'\r\n            for={props.id || props.name}>\r\n            {label}{' '}\r\n          </label>\r\n\r\n          <input type='text' {...field} {...props} />\r\n        </div>\r\n        <br />\r\n        {meta.touched && meta.error ? (\r\n          <div className='error'>\r\n            <div class='ui pointing red basic label'>{meta.error}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='employer-header'>\r\n      <Header as='h2' color='orange'>\r\n        System User\r\n      </Header>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          id: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          id: Yup.number().required('Required')\r\n        })}\r\n        onSubmit={(values) => {\r\n\r\n          history.push('/systemuser/' + values.id);\r\n        }}>\r\n        <Form>\r\n          <TextField\r\n            label='Id'\r\n            name='id'\r\n            id=\"id\"\r\n            type='text'\r\n            placeholder='1,2,3 etc...'\r\n          />\r\n          <br />\r\n\r\n          <Button color='blue' inverted type='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default class ActivationPanelService {\r\n  setApproved(panelForJob) {\r\n    return axios.post(\"http://localhost:8080/api/activationpanel/setapproved\",panelForJob);\r\n  }\r\n  setUnapproved(panelForJob) {\r\n    return axios.post(\"http://localhost:8080/api/activationpanel/setunapproved\",panelForJob);\r\n  }\r\n}","import React, {useEffect, useState} from 'react';\r\nimport JobService from '../../services/JobService';\r\nimport ActivationPanelService from '../../services/ActivationPanelService';\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  Segment,\r\n  Table,\r\n  Header,\r\n  Icon,\r\n  Input,\r\n} from 'semantic-ui-react';\r\nimport {useParams} from 'react-router-dom';\r\n\r\nexport default function JobConfirmationPanel() {\r\n\r\n  let jobService = new JobService();\r\n  let activationPanelService = new ActivationPanelService();\r\n  let {systemUserId} = useParams();\r\n\r\n  const [unapprovedJobs, setUnapprovedJobs] = useState([]);\r\n  useEffect(() => {\r\n    let jobService = new JobService();\r\n    jobService\r\n      .getUnapprovedJobs()\r\n      .then((result) => {\r\n        setUnapprovedJobs(result.data.data);\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  const [approvedJobs, setApprovedJobs] = useState([]);\r\n  useEffect(() => {\r\n    let jobService = new JobService();\r\n    jobService\r\n      .getApprovedJobs()\r\n      .then((result) => {\r\n        setApprovedJobs(result.data.data);\r\n      })\r\n      .catch();\r\n  }, []);\r\n\r\n  function handleOnClickApprove() {\r\n    unapprovedJobs.forEach((job) => {\r\n      if (document.getElementById(job.id.toString() + 'checkbox').checked) {\r\n        let panelForJob = {};\r\n        panelForJob.jobId = job.id;\r\n        panelForJob.detail = document.getElementById('detailInput').value;\r\n        panelForJob.systemUserId = systemUserId;\r\n        activationPanelService.setApproved(panelForJob);\r\n      }\r\n    });\r\n    window.location.reload();\r\n  }\r\n  function handleOnClickApproveAll() {\r\n    unapprovedJobs.forEach((job) => {\r\n      let panelForJob = {};\r\n      panelForJob.jobId = job.id;\r\n      panelForJob.detail = document.getElementById('detailInput').value;\r\n      panelForJob.systemUserId = systemUserId;\r\n      activationPanelService.setApproved(panelForJob);\r\n    });\r\n    window.location.reload();\r\n  }\r\n  function handleOnClickDelete() {\r\n    unapprovedJobs.forEach((job) => {\r\n      if (document.getElementById(job.id.toString() + 'checkbox').checked) {\r\n        jobService.deleteJob(job.id);\r\n      }\r\n    });\r\n    window.location.reload();\r\n  }\r\n  function handleOnClickUnapprove() {\r\n    approvedJobs.forEach((job) => {\r\n      if (document.getElementById(job.id.toString() + 'checkbox').checked) {\r\n        let panelForJob = {};\r\n        panelForJob.jobId = job.id;\r\n        panelForJob.detail = document.getElementById('detailInput').value;\r\n        panelForJob.systemUserId = systemUserId;\r\n        activationPanelService.setUnapproved(panelForJob);\r\n      }\r\n    });\r\n    window.location.reload();\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Segment.Group>\r\n        <Segment color='orange' textAlign='center' padded='very'>\r\n          <Header>\r\n            Jobs Pending Approval <Icon name='history' />\r\n          </Header>\r\n        </Segment>\r\n        <Segment.Group>\r\n          <Segment textAlign='center'>\r\n            <Table celled compact definition>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell />\r\n                  <Table.HeaderCell>Company Name</Table.HeaderCell>\r\n                  <Table.HeaderCell>Job Position</Table.HeaderCell>\r\n                  <Table.HeaderCell>City</Table.HeaderCell>\r\n                  <Table.HeaderCell>Salary</Table.HeaderCell>\r\n                  <Table.HeaderCell>Work Place</Table.HeaderCell>\r\n                  <Table.HeaderCell>Work Time</Table.HeaderCell>\r\n                  <Table.HeaderCell>DeadLine</Table.HeaderCell>\r\n                  <Table.HeaderCell>Description</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n\r\n              <Table.Body>\r\n                {unapprovedJobs.map((job) => (\r\n                  <Table.Row key={job.id}>\r\n                    <Table.Cell collapsing>\r\n                      <Checkbox toggle id={job.id.toString() + 'checkbox'} />\r\n                    </Table.Cell>\r\n\r\n                    <Table.Cell>\r\n                      <Header>{job.companyName}</Header>\r\n                    </Table.Cell>\r\n                    <Table.Cell>{job.positionName}</Table.Cell>\r\n                    <Table.Cell>{job.cityName}</Table.Cell>\r\n                    <Table.Cell>\r\n                      {job.minimumSalary + '-' + job.maximumSalary}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{job.workPlaceName}</Table.Cell>\r\n                    <Table.Cell>{job.workTimeName}</Table.Cell>\r\n                    <Table.Cell>{job.deadLine}</Table.Cell>\r\n                    <Table.Cell>{job.description}</Table.Cell>\r\n                  </Table.Row>\r\n                ))}\r\n              </Table.Body>\r\n\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell />\r\n                  <Table.HeaderCell colSpan='9'>\r\n                    <Button\r\n                      floated='right'\r\n                      icon\r\n                      labelPosition='left'\r\n                      negative\r\n                      size='small'\r\n                      onClick={handleOnClickDelete}>\r\n                      <Icon name='delete' /> Decline\r\n                    </Button>\r\n                    <Button\r\n                      size='small'\r\n                      positive\r\n                      onClick={handleOnClickApprove}>\r\n                      Approve\r\n                    </Button>\r\n                    <Button\r\n                      size='small'\r\n                      color='linkedin'\r\n                      onClick={handleOnClickApproveAll}>\r\n                      Approve All\r\n                    </Button>\r\n                    <Input\r\n                      transparent\r\n                      id='detailInput'\r\n                      placeholder='Detail...'\r\n                      icon='thumbtack'\r\n                      iconPosition='left'\r\n                    />\r\n                  </Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Segment.Group>\r\n\r\n      <Segment.Group>\r\n        <Segment color='orange' textAlign='center' padded='very'>\r\n          <Header>\r\n          Approved Jobs<Icon name='check' />\r\n          </Header>\r\n        </Segment>\r\n        <Segment.Group>\r\n          <Segment textAlign='center'>\r\n            <Table celled compact definition>\r\n              <Table.Header fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell />\r\n                  <Table.HeaderCell>Company Name</Table.HeaderCell>\r\n                  <Table.HeaderCell>Job Position</Table.HeaderCell>\r\n                  <Table.HeaderCell>City</Table.HeaderCell>\r\n                  <Table.HeaderCell>Salary</Table.HeaderCell>\r\n                  <Table.HeaderCell>Work Place</Table.HeaderCell>\r\n                  <Table.HeaderCell>Work Time</Table.HeaderCell>\r\n                  <Table.HeaderCell>DeadLine</Table.HeaderCell>\r\n                  <Table.HeaderCell>Description</Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n\r\n              <Table.Body>\r\n                {approvedJobs.map((job) => (\r\n                  <Table.Row key={job.id}>\r\n                    <Table.Cell collapsing>\r\n                      <Checkbox toggle id={job.id.toString() + 'checkbox'} />\r\n                    </Table.Cell>\r\n\r\n                    <Table.Cell>\r\n                      <Header>{job.companyName}</Header>\r\n                    </Table.Cell>\r\n                    <Table.Cell>{job.positionName}</Table.Cell>\r\n                    <Table.Cell>{job.cityName}</Table.Cell>\r\n                    <Table.Cell>\r\n                      {job.minimumSalary + '-' + job.maximumSalary}\r\n                    </Table.Cell>\r\n                    <Table.Cell>{job.workPlaceName}</Table.Cell>\r\n                    <Table.Cell>{job.workTimeName}</Table.Cell>\r\n                    <Table.Cell>{job.deadLine}</Table.Cell>\r\n                    <Table.Cell>{job.description}</Table.Cell>\r\n                  </Table.Row>\r\n                ))}\r\n              </Table.Body>\r\n\r\n              <Table.Footer fullWidth>\r\n                <Table.Row>\r\n                  <Table.HeaderCell />\r\n                  <Table.HeaderCell colSpan='9'>\r\n                    <Button\r\n                      floated='right'\r\n                      icon\r\n                      labelPosition='left'\r\n                      negative\r\n                      size='small'\r\n                      onClick={handleOnClickDelete}>\r\n                      <Icon name='delete' /> Delete\r\n                    </Button>\r\n                    <Button\r\n                      size='small'\r\n                      color=\"orange\"\r\n                      inverted\r\n                      onClick={handleOnClickUnapprove}>\r\n                      Unapprove\r\n                    </Button>\r\n                    <Input\r\n                      transparent\r\n                      id='detailInput'\r\n                      placeholder='Detail...'\r\n                      icon='thumbtack'\r\n                      iconPosition='left'\r\n                    />\r\n                  </Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Footer>\r\n            </Table>\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Segment.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {Header, Button} from 'semantic-ui-react';\r\nimport {Formik, Form, useField} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nexport default function EmployerSignUpPage() {\r\n  const history = useHistory();\r\n\r\n  const TextField = ({label, ...props}) => {\r\n    \r\n    const [field, meta] = useField(props);\r\n    return (\r\n      <div>\r\n        <div className='ui input'>\r\n          <label\r\n            className='labelForSystemUserSignUp'\r\n            for={props.id || props.name}>\r\n            {label}{' '}\r\n          </label>\r\n\r\n          <input type='text' {...field} {...props} />\r\n        </div>\r\n        <br />\r\n        {meta.touched && meta.error ? (\r\n          <div className='error'>\r\n            <div class='ui pointing red basic label'>{meta.error}</div>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className='jobSeeker-header'>\r\n      <Header as='h2' color='red'>\r\n        Job Seeker\r\n      </Header>\r\n\r\n      <Formik\r\n        initialValues={{\r\n          id: '',\r\n        }}\r\n        validationSchema={Yup.object({\r\n          id: Yup.number().required('Required')\r\n        })}\r\n        onSubmit={(values) => {\r\n          history.push('/jobseeker/' + values.id);\r\n        }}>\r\n        <Form>\r\n          <TextField\r\n            label='Id'\r\n            name='id'\r\n            id=\"id\"\r\n            type='text'\r\n            placeholder='1,2,3 etc...'\r\n          />\r\n          <br />\r\n\r\n          <Button color='blue' inverted type='submit'>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MainPage() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router';\r\n// import {  useHistory } from 'react-router';\r\nimport { Table, Header, Grid, Segment, Image, Card, Label, Divider } from 'semantic-ui-react';\r\nimport JobSeekerService from '../../services/JobSeekerService'\r\n\r\nexport default function JobSeekerDetail() {\r\n\r\n    const { jobSeekerId } = useParams()\r\n    // const history = useHistory();\r\n    const [jobSeeker, setJobSeeker] = useState({})\r\n    useEffect(() => {\r\n        let jobSeekerService = new JobSeekerService();\r\n        jobSeekerService.getJobSeekerById(jobSeekerId).then((result) => setJobSeeker(result.data.data)).catch()\r\n\r\n    }, [jobSeekerId])\r\n\r\n\r\n    return (\r\n        <Grid className=\"jobSeekerDetail\">\r\n            <Grid.Row >\r\n                <Grid.Column computer={16}>\r\n                    <Segment.Group>\r\n                        <Segment vertical color=\"red\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                            <Grid compact=\"true\">\r\n                                <Grid.Row>\r\n                                    <Grid.Column computer={16}>\r\n                                        <Image src=\"https://react.semantic-ui.com/images/wireframe/square-image.png\" size=\"normal\" floated=\"left\" verticalAlign='bottom' circular />\r\n                                        <Grid compact=\"true\">\r\n                                            <Grid.Row>\r\n                                                <Grid.Column computer={16}>\r\n                                                    <Header as=\"h1\" floated=\"left\" content={jobSeeker.firstName + \" \" + jobSeeker.lastName} subheader={jobSeeker.user?.email} dividing />\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                            <Grid.Row >\r\n                                                <Grid.Column computer={6} textAlign=\"justified\">\r\n                                                    {!!jobSeeker.info ? <p className=\"left floated\">{jobSeeker.info}</p> : <p className=\"left floated\">There is no informaiton about {jobSeeker.firstName + \" \" + jobSeeker.lastName}...</p>}\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                        </Grid>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                        </Segment>\r\n                    </Segment.Group>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n                <Grid.Column computer={12}>\r\n                    {jobSeeker.attendedSchools?.length === 0 ? null :\r\n                        <Grid.Row className=\"marginBottomMedium\">\r\n                            <Grid.Column computer={16} >\r\n                                <Segment.Group>\r\n                                    <Segment vertical color=\"red\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                                        <Label attached='top' basic color=\"red\" ><Header color=\"red\" as=\"h3\">EDUCATION</Header></Label>\r\n                                        <Card.Group centered itsPerRow={6}>\r\n                                            {jobSeeker.attendedSchools?.map((school) =>\r\n\r\n                                                <Card key={school.id} color=\"pink\">\r\n                                                    <Card.Content>\r\n                                                        <Card.Header>{school.school.schoolName}</Card.Header>\r\n                                                        <Card.Meta>{school.dateOfStarting} - {school.dateOfGraduation}</Card.Meta>\r\n                                                        <Card.Description>\r\n\r\n                                                        </Card.Description>\r\n                                                    </Card.Content>\r\n                                                </Card>\r\n                                            )}\r\n                                        </Card.Group>\r\n                                    </Segment>\r\n                                </Segment.Group>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    }\r\n                    {jobSeeker.languages?.length === 0 ? null :\r\n                        <Grid.Row className=\"marginBottomMedium\">\r\n                            <Grid.Column computer={16}>\r\n                                <Segment.Group>\r\n                                    <Segment vertical color=\"red\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                                        <Label attached='top' color=\"red\" basic><Header color=\"red\" as=\"h3\">FOREIGN LANGUAGE</Header></Label>\r\n                                        <Table basic=\"very\" textAlign='center' striped>\r\n                                            <Table.Header>\r\n                                                <Table.Row>\r\n                                                    <Table.HeaderCell >Language Name</Table.HeaderCell>\r\n                                                    <Table.HeaderCell>Level</Table.HeaderCell>\r\n                                                </Table.Row>\r\n                                            </Table.Header>\r\n                                            <Table.Body>\r\n                                                {jobSeeker.languages?.map((language) =>\r\n                                                    <Table.Row key={language.id}>\r\n                                                        <Table.Cell>\r\n                                                            <Header as='h4' image>\r\n\r\n                                                                <Header.Content>\r\n                                                                    {language.languageName}\r\n                                                                    <Header.Subheader>{language.languageLevel.levelDescription}</Header.Subheader>\r\n                                                                </Header.Content>\r\n                                                            </Header>\r\n                                                        </Table.Cell>\r\n                                                        <Table.Cell >{language.languageLevel.id}</Table.Cell>\r\n                                                    </Table.Row>\r\n                                                )}\r\n                                            </Table.Body>\r\n                                        </Table>\r\n                                    </Segment>\r\n                                </Segment.Group>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    }\r\n                    {jobSeeker.workExperiences?.length === 0 ? null :\r\n                        <Grid.Row className=\"marginBottomMedium\">\r\n                            <Grid.Column computer={16} >\r\n                                <Segment.Group>\r\n                                    <Segment vertical color=\"red\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                                        <Label attached='top' color=\"red\" basic><Header color=\"red\" as=\"h3\">WORK EXPERIENCE</Header></Label>\r\n                                        <Card.Group centered itsPerRow={6}>\r\n                                            {jobSeeker.workExperiences?.map((experience) =>\r\n                                                <Card key={experience.id} color=\"pink\">\r\n                                                    <Card.Content>\r\n                                                        <Card.Header>{experience.workplaceName}</Card.Header>\r\n                                                        <Card.Meta>{experience.startingDate} - {experience.quitDate}</Card.Meta>\r\n                                                        <Card.Description>\r\n                                                            {experience.jobPosition.position_name}\r\n                                                        </Card.Description>\r\n                                                    </Card.Content>\r\n                                                </Card>\r\n                                            )}\r\n                                        </Card.Group>\r\n                                    </Segment>\r\n                                </Segment.Group>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column computer={4}>\r\n                    <Segment.Group>\r\n                        <Segment vertical color=\"red\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                            <Label attached='top' color=\"red\" basic><Header color=\"red\" as=\"h3\">CONTACT</Header></Label>\r\n                            <Header as=\"h4\">{jobSeeker.user?.email}</Header>\r\n                            <Divider horizontal>\r\n                                <div class='ui pointing red basic label'>Email</div>\r\n                            </Divider>\r\n                            <Header as=\"h4\">{jobSeeker.linkedInAccount}</Header>\r\n                            <Divider horizontal>\r\n                                <div class='ui pointing teal basic label'>LinkedIn</div>\r\n                            </Divider>\r\n                            <Header as=\"h4\">{jobSeeker.githubAccount}</Header>\r\n                            <Divider horizontal>\r\n                                <div class='ui pointing black basic label'>Github</div>\r\n                            </Divider>\r\n                        </Segment>\r\n                    </Segment.Group>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Table, Header, Grid, Segment,Icon, Label, Divider } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport EmployerService from '../../services/EmployerService';\r\n\r\nexport default function EmployerDetailPage() {\r\n    const { employerId } = useParams()\r\n    // const history = useHistory();\r\n    const [employer, setEmployer] = useState({})\r\n    useEffect(() => {\r\n        let employerService = new EmployerService();\r\n        employerService.getEmployerById(employerId).then((result) => setEmployer(result.data.data)).catch()\r\n\r\n    }, [employerId])\r\n\r\n    return (\r\n        <Grid >\r\n            <Grid.Row>\r\n                <Grid.Column computer={12}>\r\n                    {employer.webSites?.length < 1 ? null :\r\n                        <Grid.Row className=\"marginBottomMedium\">\r\n                            <Grid.Column computer={16}>\r\n                                <Segment.Group>\r\n                                    <Segment vertical color=\"pink\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                                        <Label attached='top' color=\"pink\" basic><Header color=\"pink\" as=\"h3\">COMPANY</Header></Label>\r\n                                        <Table basic=\"very\" textAlign='center' striped>\r\n                                            <Table.Header>\r\n                                                <Table.Row>\r\n                                                    <Table.HeaderCell ><Icon size=\"large\" name=\"building outline\"/>Company</Table.HeaderCell>\r\n                                                    <Table.HeaderCell ><Icon name=\"desktop\"/> Website</Table.HeaderCell>\r\n                                                </Table.Row>\r\n                                            </Table.Header>\r\n                                            <Table.Body>\r\n                                                <Table.Row>\r\n                                                    <Table.Cell>\r\n                                                        <Header as='h4' image>\r\n\r\n                                                            <Header.Content>\r\n                                                                {employer.companyName}\r\n                                                                <Header.Subheader>{}</Header.Subheader>\r\n                                                            </Header.Content>\r\n                                                        </Header>\r\n                                                    </Table.Cell>\r\n                                                    <Table.Cell ><Header as=\"h4\" color=\"pink\">{employer.webSites}</Header></Table.Cell>\r\n                                                </Table.Row>\r\n                                            </Table.Body>\r\n                                        </Table>\r\n                                    </Segment>\r\n                                </Segment.Group>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    }\r\n\r\n                    {employer.webSites?.length < 1 ? null :\r\n                        <Grid.Row className=\"marginBottomMedium\">\r\n                            <Grid.Column computer={16}>\r\n                                <Segment.Group>\r\n                                    <Segment vertical color=\"pink\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                                        <Label attached='top' color=\"pink\" basic><Header color=\"pink\" as=\"h3\">OFFERS</Header></Label>\r\n                                        <Table basic=\"very\" textAlign='center' striped>\r\n                                            <Table.Header>\r\n                                                <Table.Row>\r\n                                                    <Table.HeaderCell ><Icon size=\"large\" name=\"building outline\"/>BETA</Table.HeaderCell>\r\n                                                    <Table.HeaderCell ><Icon name=\"desktop\"/> BETA</Table.HeaderCell>\r\n                                                </Table.Row>\r\n                                            </Table.Header>\r\n                                            <Table.Body>\r\n                                                <Table.Row>\r\n                                                    <Table.Cell>\r\n                                                        <Header as='h4' image>\r\n\r\n                                                            <Header.Content>\r\n                                                                BETA\r\n                                                                <Header.Subheader>BETA</Header.Subheader>\r\n                                                            </Header.Content>\r\n                                                        </Header>\r\n                                                    </Table.Cell>\r\n                                                    <Table.Cell ><Header as=\"h4\" color=\"pink\">BETA</Header></Table.Cell>\r\n                                                </Table.Row>\r\n                                            </Table.Body>\r\n                                        </Table>\r\n                                    </Segment>\r\n                                </Segment.Group>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    }\r\n\r\n                </Grid.Column>\r\n                <Grid.Column computer={4}>\r\n                    <Segment.Group>\r\n                        <Segment vertical color=\"pink\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                            <Label attached='top' color=\"pink\" basic><Header color=\"pink\" as=\"h3\">CONTACT</Header></Label>\r\n                            <Header as=\"h4\">{employer.user?.email}</Header>\r\n                            <Divider horizontal>\r\n                                <div class='ui pointing red basic label'>Email</div>\r\n                            </Divider>\r\n                            <Header as=\"h4\">{employer.phone}</Header>\r\n                            <Divider horizontal>\r\n                                <div class='ui pointing green basic label'>Phone Number</div>\r\n                            </Divider>\r\n                            \r\n                        </Segment>\r\n                    </Segment.Group>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router';\r\n// import {  useHistory } from 'react-router';\r\nimport { Container, Header, Grid, Segment, List, Icon, Label, Card, Button, Divider } from 'semantic-ui-react';\r\nimport JobService from '../../services/JobService'\r\nimport EmployerService from '../../services/EmployerService'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function JobDetailPage() {\r\n    const { jobId } = useParams()\r\n    const [job, setJob] = useState({})\r\n    const [employer, setEmployer] = useState({})\r\n\r\n    useEffect(() => {\r\n        let jobService = new JobService();\r\n        jobService.getJobById(jobId).then((result) => setJob(result.data.data)).catch()\r\n    }, [jobId])\r\n\r\n    useEffect(() => {\r\n        let employerService = new EmployerService();\r\n        employerService.getEmployerById(job.employer?.id).then((result) => setEmployer(result.data.data))\r\n    }, [job.employer?.id])\r\n    console.log(employer)\r\n\r\n\r\n    return (\r\n        <Grid >\r\n            <Grid.Row>\r\n                <Grid.Column computer={11} mobile={16} tablet={16}>\r\n                    <Segment.Group>\r\n                        <Segment vertical color=\"blue\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n\r\n                            <Header centered as=\"h1\" dividing >\r\n                                {job.jobPosition?.position_name}\r\n                                <Header.Subheader >\r\n                                    <Icon name=\"building\" />{\"Company Name : \" + employer.companyName}\r\n                                </Header.Subheader>\r\n                            </Header>\r\n                            <Grid>\r\n                                <Grid.Column computer=\"5\" mobile=\"16\" tablet=\"4\">\r\n                                    <List>\r\n                                        <List.Item className=\"marginBottom marginTopSmall\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='users' />Number of empty positions\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.empty_positions}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n\r\n                                        <List.Item className=\"marginBottomMedium\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='money' />Min - Max salary\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.minimumSalary} - {job.maximumSalary}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n\r\n                                        <List.Item className=\"marginBottomMedium\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='hourglass half' />Deadline\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.deadline}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n\r\n                                        <List.Item className=\"marginBottomMedium\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='map marker alternate' />Location\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.city?.cityName}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n\r\n                                        <List.Item className=\"marginBottomMedium\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='suitcase' />Work Place\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.workPlace?.workPlaceName}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n\r\n                                        <List.Item className=\"marginBottomMedium\">\r\n                                            <List.Content>\r\n                                                <List.Header>\r\n                                                    <List.Icon name='stopwatch' />Work Time\r\n                                                </List.Header>\r\n                                                <List.Description>\r\n                                                    {job.workTime?.workTimeName}\r\n                                                </List.Description>\r\n                                            </List.Content>\r\n                                        </List.Item>\r\n                                    </List>\r\n                                </Grid.Column>\r\n                                <Grid.Column computer=\"11\" mobile=\"16\" tablet=\"12\">\r\n                                    <Container textAlign='justified' className=\"marginTopSmall paddingRight\">\r\n                                        {job.description}\r\n                                    </Container>\r\n                                </Grid.Column>\r\n                            </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                        </Segment>\r\n                    </Segment.Group>\r\n\r\n\r\n                </Grid.Column>\r\n                <Grid.Column computer={5} mobile={16} tablet={16}>\r\n                    <Segment.Group>\r\n                        <Segment vertical color=\"teal\" padded=\"very\" secondary rounded=\"true\" stacked>\r\n                            <Label attached='top' color=\"teal\" basic><Header color=\"teal\" as=\"h3\">CONTACT</Header></Label>\r\n\r\n\r\n                            <Header as={\"h3\"}>\r\n                                <Header.Content>\r\n                                    {employer.companyName}\r\n                                </Header.Content>\r\n                                <Header.Subheader>\r\n                                    {employer.user?.email}\r\n                                </Header.Subheader>\r\n                            </Header>\r\n\r\n                            <Button animated as={Link} color=\"pink\"  basic to={`/employers/${employer.id}`}>\r\n                                <Button.Content visible>Go to infos</Button.Content>\r\n                                <Button.Content hidden>\r\n                                    <Icon name=\"id card outline\" />\r\n                                </Button.Content>\r\n                            </Button>\r\n\r\n\r\n                        </Segment>\r\n                    </Segment.Group>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n        </Grid>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport ChoosingSignInMethod from '../pages/ChoosingSignInMethod'\r\nimport ChoosingSignUpMethod from '../pages/ChoosingSignUpMethod'\r\nimport EmployerList from '../pages/Employers/EmployerList'\r\nimport JobList from '../pages/Jobs/JobList'\r\nimport JobPositionList from '../pages/JobPositionList'\r\nimport JobSeekerList from '../pages/JobSeekers/JobSeekerList'\r\nimport { Route } from 'react-router'\r\nimport EmployerSignUpPage from '../pages/Employers/EmployerSignUpPage'\r\nimport JobAddPage from '../pages/Employers/JobAddPage'\r\nimport SystemUserSignUpPage from '../pages/SystemUsers/SystemUserSignUpPage'\r\nimport JobConfirmationPanel from '../pages/SystemUsers/JobConfirmationPanel'\r\nimport JobSeekerSignUpPage from '../pages/JobSeekers/JobSeekerSignUpPage'\r\nimport MainPage from '../pages/MainPage'\r\nimport JobSeekerDetail from '../pages/JobSeekers/JobSeekerDetail'\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport EmployerDetailPage from '../pages/Employers/EmployerDetailPage'\r\nimport JobDetailPage from '../pages/Jobs/JobDetailPage'\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <div id=\"content-area\">\r\n            <ToastContainer position=\"bottom-right\"/>\r\n            <Route exact path=\"/\" component={MainPage} />\r\n            <Route exact path=\"/home\" component={MainPage} />\r\n            <Route exact path=\"/jobs\" component={JobList} />\r\n            <Route exact path=\"/jobs/:jobId\" component={JobDetailPage} />\r\n            <Route path=\"/signIn\" component={ChoosingSignInMethod} />\r\n            <Route path=\"/signIn/Employer\" component={JobList} />\r\n            <Route path=\"/signup\" component={ChoosingSignUpMethod} />\r\n            <Route path=\"/signup/employer\" component={EmployerSignUpPage} />\r\n            <Route path=\"/signup/systemuser\" component={SystemUserSignUpPage} />\r\n            <Route path=\"/employer/:employerId\" component={JobAddPage} />\r\n            <Route path=\"/systemuser/:systemUserId\" component={JobConfirmationPanel} />\r\n            <Route path=\"/signup/jobseeker\" component={JobSeekerSignUpPage} />\r\n            <Route exact path=\"/employers\" component={EmployerList} />\r\n            <Route exact path=\"/employers/:employerId\" component={EmployerDetailPage} />\r\n            <Route exact path=\"/jobseekers\" component={JobSeekerList} />\r\n            <Route exact path=\"/jobseekers/:jobSeekerId\" component={JobSeekerDetail} />\r\n            <Route exact path=\"/jobpositions\" component={JobPositionList} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div id=\"footer\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navi from './layouts/Navi';\r\nimport Dashboard from './layouts/Dashboard';\r\nimport {Grid} from 'semantic-ui-react';\r\nimport Footer from './layouts/Footer';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App jobSeekerDetail'>\r\n        <Grid >\r\n          <Grid.Row computer={16} >\r\n            <Grid.Column computer={3} id=\"menu\">\r\n              <Navi />\r\n            </Grid.Column>\r\n            <Grid.Column computer={13} >\r\n              <Dashboard />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n        <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter><App/></BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}